// Copyright 2019-2025 Matthew Wilson and Synesis Information Systems. All
// rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

/*
 * Created: 5th March 2019
 * Updated: 28th March 2025
 */

package diagnosticism

import (
	severity "github.com/synesissoftware/Diagnosticism.Go/severity"

	"bytes"
	"fmt"
)

var enableTracing bool

// Enables tracing globally (for all threads/goroutines).
func EnableTracing(enable bool) {

	enableTracing = enable
}

// Indicates whether tracing is enabled globally (for all
// threads/goroutines).
func IsTracingEnabled() bool {

	return enableTracing
}

// Flags type for [TraceArgument.Flags].
type TraceArgumentFlags int64

const (
	None TraceArgumentFlags = 0 // No flags specified
)

const (
	NameOnly TraceArgumentFlags = 1 << iota // Does not trace the value of a function parameter.
)

// Structure defining trace argument, generated by [Trarg] and
// [TrargNameOnly].
type TraceArgument struct {
	Name  string
	Value interface{}
	Flags TraceArgumentFlags
}

func (arg TraceArgument) String() string {

	if 0 != (NameOnly & arg.Flags) {

		return fmt.Sprintf("%s(%T)", arg.Name, arg.Value)
	} else {

		return fmt.Sprintf("%s(%T)=%v", arg.Name, arg.Value, arg.Value)
	}
}

// [INTERNAL]
//
// Purpose: create a TraceArgument instance
//
// Parameters:
//   - +name+ (string) The name of the argument
//   - +nameOnly+ (bool) Whether only the name (and type) is to be shown
//   - +value+ (interface{}) The value of the argument
//
// Return: (TraceArgument) an instance
//
// Remarks: use of a boolean parameter is valid here because this is an
// internal method.
func makeTraceArgument(name string, flags TraceArgumentFlags, value interface{}) TraceArgument {

	return TraceArgument{Name: name, Value: value, Flags: flags}
}

// Creates an argument descriptor that will trace the argument name, type,
// and value.
func Trarg(name string, value interface{}) TraceArgument {

	return makeTraceArgument(name, None, value)
}

// Creates an argument descriptor that will trace the argument name and
// type, but not value.
func TrargNameOnly(name string, value interface{}) TraceArgument {

	return makeTraceArgument(name, NameOnly, value)
}

// Provides named-argument tracing of a function/method, as in:
//
//	 import d "github.com/synesissoftware/Diagnosticism.Go"
//
//		func SomeFunction(x, y int, order string) {
//
//			d.Trace("SomeFunction",
//				d.Trarg("x", x),
//				d.Trarg("y", y),
//				d.TrargNameOnly("order", order),
//			)
//
//			. . . impl. of SomeFunc()
//		}
//
// The first parameter `function_name` is a string, and the remaining
// parameters are a variable length list of TraceArgument instances, which
// may be created using the `Trarg()` and `TrargNameOnly()` functions
func Trace(function_name string, args ...TraceArgument) {

	if !enableTracing {

		return
	}

	var buffer bytes.Buffer

	buffer.WriteString(function_name)
	buffer.WriteString("(")

	for i, arg := range args {

		if i != 0 {

			buffer.WriteString(", ")
		}

		s := arg.String()

		buffer.WriteString(s)
	}

	buffer.WriteString(")")

	log_s(severity.Trace, buffer.String())
}

/* ///////////////////////////// end of file //////////////////////////// */
